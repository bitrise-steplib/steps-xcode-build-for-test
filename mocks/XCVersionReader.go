// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/bitrise-io/go-xcode/v2/xcodeversion"
	mock "github.com/stretchr/testify/mock"
)

// NewXCVersionReader creates a new instance of XCVersionReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXCVersionReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *XCVersionReader {
	mock := &XCVersionReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// XCVersionReader is an autogenerated mock type for the Reader type
type XCVersionReader struct {
	mock.Mock
}

type XCVersionReader_Expecter struct {
	mock *mock.Mock
}

func (_m *XCVersionReader) EXPECT() *XCVersionReader_Expecter {
	return &XCVersionReader_Expecter{mock: &_m.Mock}
}

// GetVersion provides a mock function for the type XCVersionReader
func (_mock *XCVersionReader) GetVersion() (xcodeversion.Version, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 xcodeversion.Version
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (xcodeversion.Version, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() xcodeversion.Version); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(xcodeversion.Version)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// XCVersionReader_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type XCVersionReader_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *XCVersionReader_Expecter) GetVersion() *XCVersionReader_GetVersion_Call {
	return &XCVersionReader_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *XCVersionReader_GetVersion_Call) Run(run func()) *XCVersionReader_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *XCVersionReader_GetVersion_Call) Return(version xcodeversion.Version, err error) *XCVersionReader_GetVersion_Call {
	_c.Call.Return(version, err)
	return _c
}

func (_c *XCVersionReader_GetVersion_Call) RunAndReturn(run func() (xcodeversion.Version, error)) *XCVersionReader_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}
