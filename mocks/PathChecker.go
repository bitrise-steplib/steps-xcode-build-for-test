// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewPathChecker creates a new instance of PathChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPathChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *PathChecker {
	mock := &PathChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PathChecker is an autogenerated mock type for the PathChecker type
type PathChecker struct {
	mock.Mock
}

type PathChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *PathChecker) EXPECT() *PathChecker_Expecter {
	return &PathChecker_Expecter{mock: &_m.Mock}
}

// IsDirExists provides a mock function for the type PathChecker
func (_mock *PathChecker) IsDirExists(pth string) (bool, error) {
	ret := _mock.Called(pth)

	if len(ret) == 0 {
		panic("no return value specified for IsDirExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(pth)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(pth)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(pth)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PathChecker_IsDirExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDirExists'
type PathChecker_IsDirExists_Call struct {
	*mock.Call
}

// IsDirExists is a helper method to define mock.On call
//   - pth string
func (_e *PathChecker_Expecter) IsDirExists(pth interface{}) *PathChecker_IsDirExists_Call {
	return &PathChecker_IsDirExists_Call{Call: _e.mock.On("IsDirExists", pth)}
}

func (_c *PathChecker_IsDirExists_Call) Run(run func(pth string)) *PathChecker_IsDirExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PathChecker_IsDirExists_Call) Return(b bool, err error) *PathChecker_IsDirExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *PathChecker_IsDirExists_Call) RunAndReturn(run func(pth string) (bool, error)) *PathChecker_IsDirExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsPathExists provides a mock function for the type PathChecker
func (_mock *PathChecker) IsPathExists(pth string) (bool, error) {
	ret := _mock.Called(pth)

	if len(ret) == 0 {
		panic("no return value specified for IsPathExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(pth)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(pth)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(pth)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PathChecker_IsPathExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPathExists'
type PathChecker_IsPathExists_Call struct {
	*mock.Call
}

// IsPathExists is a helper method to define mock.On call
//   - pth string
func (_e *PathChecker_Expecter) IsPathExists(pth interface{}) *PathChecker_IsPathExists_Call {
	return &PathChecker_IsPathExists_Call{Call: _e.mock.On("IsPathExists", pth)}
}

func (_c *PathChecker_IsPathExists_Call) Run(run func(pth string)) *PathChecker_IsPathExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PathChecker_IsPathExists_Call) Return(b bool, err error) *PathChecker_IsPathExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *PathChecker_IsPathExists_Call) RunAndReturn(run func(pth string) (bool, error)) *PathChecker_IsPathExists_Call {
	_c.Call.Return(run)
	return _c
}
