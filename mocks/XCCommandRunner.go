// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/bitrise-io/go-xcode/v2/xcodecommand"
	"github.com/hashicorp/go-version"
	mock "github.com/stretchr/testify/mock"
)

// NewXCCommandRunner creates a new instance of XCCommandRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXCCommandRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *XCCommandRunner {
	mock := &XCCommandRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// XCCommandRunner is an autogenerated mock type for the Runner type
type XCCommandRunner struct {
	mock.Mock
}

type XCCommandRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *XCCommandRunner) EXPECT() *XCCommandRunner_Expecter {
	return &XCCommandRunner_Expecter{mock: &_m.Mock}
}

// CheckInstall provides a mock function for the type XCCommandRunner
func (_mock *XCCommandRunner) CheckInstall() (*version.Version, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckInstall")
	}

	var r0 *version.Version
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*version.Version, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *version.Version); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*version.Version)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// XCCommandRunner_CheckInstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckInstall'
type XCCommandRunner_CheckInstall_Call struct {
	*mock.Call
}

// CheckInstall is a helper method to define mock.On call
func (_e *XCCommandRunner_Expecter) CheckInstall() *XCCommandRunner_CheckInstall_Call {
	return &XCCommandRunner_CheckInstall_Call{Call: _e.mock.On("CheckInstall")}
}

func (_c *XCCommandRunner_CheckInstall_Call) Run(run func()) *XCCommandRunner_CheckInstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *XCCommandRunner_CheckInstall_Call) Return(version1 *version.Version, err error) *XCCommandRunner_CheckInstall_Call {
	_c.Call.Return(version1, err)
	return _c
}

func (_c *XCCommandRunner_CheckInstall_Call) RunAndReturn(run func() (*version.Version, error)) *XCCommandRunner_CheckInstall_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type XCCommandRunner
func (_mock *XCCommandRunner) Run(workDir string, xcodebuildOpts []string, logFormatterOpts []string) (xcodecommand.Output, error) {
	ret := _mock.Called(workDir, xcodebuildOpts, logFormatterOpts)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 xcodecommand.Output
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []string, []string) (xcodecommand.Output, error)); ok {
		return returnFunc(workDir, xcodebuildOpts, logFormatterOpts)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []string, []string) xcodecommand.Output); ok {
		r0 = returnFunc(workDir, xcodebuildOpts, logFormatterOpts)
	} else {
		r0 = ret.Get(0).(xcodecommand.Output)
	}
	if returnFunc, ok := ret.Get(1).(func(string, []string, []string) error); ok {
		r1 = returnFunc(workDir, xcodebuildOpts, logFormatterOpts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// XCCommandRunner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type XCCommandRunner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - workDir string
//   - xcodebuildOpts []string
//   - logFormatterOpts []string
func (_e *XCCommandRunner_Expecter) Run(workDir interface{}, xcodebuildOpts interface{}, logFormatterOpts interface{}) *XCCommandRunner_Run_Call {
	return &XCCommandRunner_Run_Call{Call: _e.mock.On("Run", workDir, xcodebuildOpts, logFormatterOpts)}
}

func (_c *XCCommandRunner_Run_Call) Run(run func(workDir string, xcodebuildOpts []string, logFormatterOpts []string)) *XCCommandRunner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *XCCommandRunner_Run_Call) Return(output xcodecommand.Output, err error) *XCCommandRunner_Run_Call {
	_c.Call.Return(output, err)
	return _c
}

func (_c *XCCommandRunner_Run_Call) RunAndReturn(run func(workDir string, xcodebuildOpts []string, logFormatterOpts []string) (xcodecommand.Output, error)) *XCCommandRunner_Run_Call {
	_c.Call.Return(run)
	return _c
}
