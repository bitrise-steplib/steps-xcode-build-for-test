// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/bitrise-io/go-xcode/xcodeproject/xcscheme"
	mock "github.com/stretchr/testify/mock"
)

// NewXcodeProject creates a new instance of XcodeProject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXcodeProject(t interface {
	mock.TestingT
	Cleanup(func())
}) *XcodeProject {
	mock := &XcodeProject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// XcodeProject is an autogenerated mock type for the XcodeProject type
type XcodeProject struct {
	mock.Mock
}

type XcodeProject_Expecter struct {
	mock *mock.Mock
}

func (_m *XcodeProject) EXPECT() *XcodeProject_Expecter {
	return &XcodeProject_Expecter{mock: &_m.Mock}
}

// Scheme provides a mock function for the type XcodeProject
func (_mock *XcodeProject) Scheme(pth string, name string) (*xcscheme.Scheme, error) {
	ret := _mock.Called(pth, name)

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 *xcscheme.Scheme
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*xcscheme.Scheme, error)); ok {
		return returnFunc(pth, name)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *xcscheme.Scheme); ok {
		r0 = returnFunc(pth, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*xcscheme.Scheme)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(pth, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// XcodeProject_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type XcodeProject_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
//   - pth string
//   - name string
func (_e *XcodeProject_Expecter) Scheme(pth interface{}, name interface{}) *XcodeProject_Scheme_Call {
	return &XcodeProject_Scheme_Call{Call: _e.mock.On("Scheme", pth, name)}
}

func (_c *XcodeProject_Scheme_Call) Run(run func(pth string, name string)) *XcodeProject_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *XcodeProject_Scheme_Call) Return(scheme *xcscheme.Scheme, err error) *XcodeProject_Scheme_Call {
	_c.Call.Return(scheme, err)
	return _c
}

func (_c *XcodeProject_Scheme_Call) RunAndReturn(run func(pth string, name string) (*xcscheme.Scheme, error)) *XcodeProject_Scheme_Call {
	_c.Call.Return(run)
	return _c
}
