// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debugf provides a mock function for the type Logger
func (_mock *Logger) Debugf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type Logger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Debugf(format interface{}, v ...interface{}) *Logger_Debugf_Call {
	return &Logger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Debugf_Call) Run(run func(format string, v ...interface{})) *Logger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_Debugf_Call) Return() *Logger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debugf_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Donef provides a mock function for the type Logger
func (_mock *Logger) Donef(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_Donef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Donef'
type Logger_Donef_Call struct {
	*mock.Call
}

// Donef is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Donef(format interface{}, v ...interface{}) *Logger_Donef_Call {
	return &Logger_Donef_Call{Call: _e.mock.On("Donef",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Donef_Call) Run(run func(format string, v ...interface{})) *Logger_Donef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_Donef_Call) Return() *Logger_Donef_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Donef_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_Donef_Call {
	_c.Run(run)
	return _c
}

// EnableDebugLog provides a mock function for the type Logger
func (_mock *Logger) EnableDebugLog(enable bool) {
	_mock.Called(enable)
	return
}

// Logger_EnableDebugLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableDebugLog'
type Logger_EnableDebugLog_Call struct {
	*mock.Call
}

// EnableDebugLog is a helper method to define mock.On call
//   - enable bool
func (_e *Logger_Expecter) EnableDebugLog(enable interface{}) *Logger_EnableDebugLog_Call {
	return &Logger_EnableDebugLog_Call{Call: _e.mock.On("EnableDebugLog", enable)}
}

func (_c *Logger_EnableDebugLog_Call) Run(run func(enable bool)) *Logger_EnableDebugLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Logger_EnableDebugLog_Call) Return() *Logger_EnableDebugLog_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_EnableDebugLog_Call) RunAndReturn(run func(enable bool)) *Logger_EnableDebugLog_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function for the type Logger
func (_mock *Logger) Errorf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type Logger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Errorf(format interface{}, v ...interface{}) *Logger_Errorf_Call {
	return &Logger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Errorf_Call) Run(run func(format string, v ...interface{})) *Logger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_Errorf_Call) Return() *Logger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Errorf_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function for the type Logger
func (_mock *Logger) Infof(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type Logger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Infof(format interface{}, v ...interface{}) *Logger_Infof_Call {
	return &Logger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Infof_Call) Run(run func(format string, v ...interface{})) *Logger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_Infof_Call) Return() *Logger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Infof_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_Infof_Call {
	_c.Run(run)
	return _c
}

// Printf provides a mock function for the type Logger
func (_mock *Logger) Printf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type Logger_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Printf(format interface{}, v ...interface{}) *Logger_Printf_Call {
	return &Logger_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Printf_Call) Run(run func(format string, v ...interface{})) *Logger_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_Printf_Call) Return() *Logger_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Printf_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_Printf_Call {
	_c.Run(run)
	return _c
}

// Println provides a mock function for the type Logger
func (_mock *Logger) Println() {
	_mock.Called()
	return
}

// Logger_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type Logger_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
func (_e *Logger_Expecter) Println() *Logger_Println_Call {
	return &Logger_Println_Call{Call: _e.mock.On("Println")}
}

func (_c *Logger_Println_Call) Run(run func()) *Logger_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Logger_Println_Call) Return() *Logger_Println_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Println_Call) RunAndReturn(run func()) *Logger_Println_Call {
	_c.Run(run)
	return _c
}

// TDebugf provides a mock function for the type Logger
func (_mock *Logger) TDebugf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_TDebugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDebugf'
type Logger_TDebugf_Call struct {
	*mock.Call
}

// TDebugf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) TDebugf(format interface{}, v ...interface{}) *Logger_TDebugf_Call {
	return &Logger_TDebugf_Call{Call: _e.mock.On("TDebugf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_TDebugf_Call) Run(run func(format string, v ...interface{})) *Logger_TDebugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_TDebugf_Call) Return() *Logger_TDebugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_TDebugf_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_TDebugf_Call {
	_c.Run(run)
	return _c
}

// TDonef provides a mock function for the type Logger
func (_mock *Logger) TDonef(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_TDonef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TDonef'
type Logger_TDonef_Call struct {
	*mock.Call
}

// TDonef is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) TDonef(format interface{}, v ...interface{}) *Logger_TDonef_Call {
	return &Logger_TDonef_Call{Call: _e.mock.On("TDonef",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_TDonef_Call) Run(run func(format string, v ...interface{})) *Logger_TDonef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_TDonef_Call) Return() *Logger_TDonef_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_TDonef_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_TDonef_Call {
	_c.Run(run)
	return _c
}

// TErrorf provides a mock function for the type Logger
func (_mock *Logger) TErrorf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_TErrorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TErrorf'
type Logger_TErrorf_Call struct {
	*mock.Call
}

// TErrorf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) TErrorf(format interface{}, v ...interface{}) *Logger_TErrorf_Call {
	return &Logger_TErrorf_Call{Call: _e.mock.On("TErrorf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_TErrorf_Call) Run(run func(format string, v ...interface{})) *Logger_TErrorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_TErrorf_Call) Return() *Logger_TErrorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_TErrorf_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_TErrorf_Call {
	_c.Run(run)
	return _c
}

// TInfof provides a mock function for the type Logger
func (_mock *Logger) TInfof(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_TInfof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TInfof'
type Logger_TInfof_Call struct {
	*mock.Call
}

// TInfof is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) TInfof(format interface{}, v ...interface{}) *Logger_TInfof_Call {
	return &Logger_TInfof_Call{Call: _e.mock.On("TInfof",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_TInfof_Call) Run(run func(format string, v ...interface{})) *Logger_TInfof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_TInfof_Call) Return() *Logger_TInfof_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_TInfof_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_TInfof_Call {
	_c.Run(run)
	return _c
}

// TPrintf provides a mock function for the type Logger
func (_mock *Logger) TPrintf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_TPrintf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TPrintf'
type Logger_TPrintf_Call struct {
	*mock.Call
}

// TPrintf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) TPrintf(format interface{}, v ...interface{}) *Logger_TPrintf_Call {
	return &Logger_TPrintf_Call{Call: _e.mock.On("TPrintf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_TPrintf_Call) Run(run func(format string, v ...interface{})) *Logger_TPrintf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_TPrintf_Call) Return() *Logger_TPrintf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_TPrintf_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_TPrintf_Call {
	_c.Run(run)
	return _c
}

// TWarnf provides a mock function for the type Logger
func (_mock *Logger) TWarnf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_TWarnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TWarnf'
type Logger_TWarnf_Call struct {
	*mock.Call
}

// TWarnf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) TWarnf(format interface{}, v ...interface{}) *Logger_TWarnf_Call {
	return &Logger_TWarnf_Call{Call: _e.mock.On("TWarnf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_TWarnf_Call) Run(run func(format string, v ...interface{})) *Logger_TWarnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_TWarnf_Call) Return() *Logger_TWarnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_TWarnf_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_TWarnf_Call {
	_c.Run(run)
	return _c
}

// Warnf provides a mock function for the type Logger
func (_mock *Logger) Warnf(format string, v ...interface{}) {
	if len(v) > 0 {
		_mock.Called(format, v)
	} else {
		_mock.Called(format)
	}

	return
}

// Logger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type Logger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Warnf(format interface{}, v ...interface{}) *Logger_Warnf_Call {
	return &Logger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Warnf_Call) Run(run func(format string, v ...interface{})) *Logger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Logger_Warnf_Call) Return() *Logger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warnf_Call) RunAndReturn(run func(format string, v ...interface{})) *Logger_Warnf_Call {
	_c.Run(run)
	return _c
}
