// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/bitrise-io/go-utils/v2/command"
	mock "github.com/stretchr/testify/mock"
)

// NewCommandFactory creates a new instance of CommandFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandFactory {
	mock := &CommandFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CommandFactory is an autogenerated mock type for the Factory type
type CommandFactory struct {
	mock.Mock
}

type CommandFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *CommandFactory) EXPECT() *CommandFactory_Expecter {
	return &CommandFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type CommandFactory
func (_mock *CommandFactory) Create(name string, args []string, opts *command.Opts) command.Command {
	ret := _mock.Called(name, args, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 command.Command
	if returnFunc, ok := ret.Get(0).(func(string, []string, *command.Opts) command.Command); ok {
		r0 = returnFunc(name, args, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(command.Command)
		}
	}
	return r0
}

// CommandFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CommandFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
//   - args []string
//   - opts *command.Opts
func (_e *CommandFactory_Expecter) Create(name interface{}, args interface{}, opts interface{}) *CommandFactory_Create_Call {
	return &CommandFactory_Create_Call{Call: _e.mock.On("Create", name, args, opts)}
}

func (_c *CommandFactory_Create_Call) Run(run func(name string, args []string, opts *command.Opts)) *CommandFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 *command.Opts
		if args[2] != nil {
			arg2 = args[2].(*command.Opts)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CommandFactory_Create_Call) Return(command1 command.Command) *CommandFactory_Create_Call {
	_c.Call.Return(command1)
	return _c
}

func (_c *CommandFactory_Create_Call) RunAndReturn(run func(name string, args []string, opts *command.Opts) command.Command) *CommandFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}
