// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io/fs"
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewFileManager creates a new instance of FileManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileManager {
	mock := &FileManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FileManager is an autogenerated mock type for the FileManager type
type FileManager struct {
	mock.Mock
}

type FileManager_Expecter struct {
	mock *mock.Mock
}

func (_m *FileManager) EXPECT() *FileManager_Expecter {
	return &FileManager_Expecter{mock: &_m.Mock}
}

// ReadDir provides a mock function for the type FileManager
func (_mock *FileManager) ReadDir(name string) ([]os.DirEntry, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []os.DirEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]os.DirEntry, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []os.DirEntry); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.DirEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileManager_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type FileManager_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - name string
func (_e *FileManager_Expecter) ReadDir(name interface{}) *FileManager_ReadDir_Call {
	return &FileManager_ReadDir_Call{Call: _e.mock.On("ReadDir", name)}
}

func (_c *FileManager_ReadDir_Call) Run(run func(name string)) *FileManager_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileManager_ReadDir_Call) Return(vs []os.DirEntry, err error) *FileManager_ReadDir_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *FileManager_ReadDir_Call) RunAndReturn(run func(name string) ([]os.DirEntry, error)) *FileManager_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function for the type FileManager
func (_mock *FileManager) ReadFile(pth string) ([]byte, error) {
	ret := _mock.Called(pth)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(pth)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(pth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(pth)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileManager_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type FileManager_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - pth string
func (_e *FileManager_Expecter) ReadFile(pth interface{}) *FileManager_ReadFile_Call {
	return &FileManager_ReadFile_Call{Call: _e.mock.On("ReadFile", pth)}
}

func (_c *FileManager_ReadFile_Call) Run(run func(pth string)) *FileManager_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileManager_ReadFile_Call) Return(bytes []byte, err error) *FileManager_ReadFile_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *FileManager_ReadFile_Call) RunAndReturn(run func(pth string) ([]byte, error)) *FileManager_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function for the type FileManager
func (_mock *FileManager) WriteFile(filename string, data []byte, perm fs.FileMode) error {
	ret := _mock.Called(filename, data, perm)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = returnFunc(filename, data, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileManager_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type FileManager_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - filename string
//   - data []byte
//   - perm fs.FileMode
func (_e *FileManager_Expecter) WriteFile(filename interface{}, data interface{}, perm interface{}) *FileManager_WriteFile_Call {
	return &FileManager_WriteFile_Call{Call: _e.mock.On("WriteFile", filename, data, perm)}
}

func (_c *FileManager_WriteFile_Call) Run(run func(filename string, data []byte, perm fs.FileMode)) *FileManager_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 fs.FileMode
		if args[2] != nil {
			arg2 = args[2].(fs.FileMode)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FileManager_WriteFile_Call) Return(err error) *FileManager_WriteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileManager_WriteFile_Call) RunAndReturn(run func(filename string, data []byte, perm fs.FileMode) error) *FileManager_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}
