title: "[BETA] Xcode Build for testing for iOS"
summary: Performs xcodebuild's build-for-testing action
description: |- 
  The Step runs Xcode's `xcodebuild` command with the `build-for-testing` option. This builds your app for testing and also creates an `.xctestrun` file. 
  
  ### Configuring the Step 
  
  At a minimum, the Step needs valid values for three inputs:
  
  - **Project (or Workspace) path**: This is the path to the `.xcodeproj` or `.xcworkspace` file. In most cases, leave it on the default value.
  - **Scheme name**: The name of your Xcode scheme. By default, the Step will use the scheme that was set when you added the app on Bitrise.
  - **Device destination**: The device and platform type to build the tests for. For available values call, `man xcodebuild` and check the Destinations section. 
  We also recommend checking out our [System reports page](https://github.com/bitrise-io/bitrise.io/tree/master/system_reports) on GitHub: you can check out the available, pre-installed simulators and other tools. 
  
  Optionally, you can define the configuration to use in the **Configuration name** input. Normally, the scheme defines the configuration type, such as **debug** or **release**.
  
  The Step can also cache your Swift PM dependencies. To enable caching, make sure the **Enable caching of Swift Package Manager packages** input is set to `swift_packages`.
  
  ### Troubleshooting
  
  In the **Debug** option group, you can:
  
  - Add additional flags to the `xcodebuild` command. 
  - Enable verbose logging.
  - Change the output directory path and the output tool.
  
  ### Useful links
  
  - [Running Xcode tests](https://devcenter.bitrise.io/testing/running-xcode-tests/)
  - [Building from the Command Line with Xcode](https://developer.apple.com/library/archive/technotes/tn2339/_index.html)
  
  ### Related Steps 
  
  - [Xcode Test for iOS](https://www.bitrise.io/integrations/steps/xcode-test)
  - [Xcode Analyze](https://www.bitrise.io/integrations/steps/xcode-analyze)
 

website: https://github.com/bitrise-steplib/steps-xcode-build-for-test
source_code_url: https://github.com/bitrise-steplib/steps-xcode-build-for-test
support_url: https://github.com/bitrise-steplib/steps-xcode-build-for-test/issues

project_type_tags:
  - ios
  - react-native
  - cordova
  - ionic

type_tags:
  - build

deps:
  check_only:
  - name: xcode

toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-build-for-test

inputs:
  - project_path: $BITRISE_PROJECT_PATH
    opts:
      title: Project (or Workspace) path
      summary: "A `.xcodeproj` or `.xcworkspace` path."
      description: "A `.xcodeproj` or `.xcworkspace` path."
      is_required: true
  - scheme: $BITRISE_SCHEME
    opts:
      title: Scheme name
      summary: "The Scheme to use."
      description: "The Scheme to use."
      is_required: true
  - configuration: Debug
    opts:
      title: "Configuration name"
      description: |-
        (optional) The configuration to use. By default your Scheme
        defines which configuration (Debug, Release, ...) should be used,
        but you can overwrite it with this option.
        **Make sure that the Configuration you specify actually exists
        in your Xcode Project**. If it does not, if you have a typo
        in the value of this input Xcode will simply use the Configuration
        specified by the Scheme and will silently ignore this parameter!
  - destination: generic/platform=iOS
    opts:
      title: Device destination
      description: |-
        Specify destination to build the testes for.
        For available values call: `man xcodebuild` and check the _Destinations_ section.
      is_required: true
  - disable_index_while_building: "yes"
    opts:
      title: Disable indexing during the build
      summary: Could make the build faster by disabling the indexing during the build run.
      description: |-
        Could make the build faster by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command which will disable the indexing during the build.

        Indexing is needed for
        
        * Autocomplete
        * Ability to quickly jump to definition
        * Get class and method help by alt clicking.

        Which are not needed in CI environment.

        **Note:** In Xcode you can turn off the `Index-WhileBuilding` feature  by disabling the `Enable Index-WhileBuilding Functionality` in the `Build Settings`.<br/>
        In CI environment you can disable it by adding `COMPILER_INDEX_STORE_ENABLE=NO` flag to the `xcodebuild` command.
      value_options:
        - "yes"
        - "no"
  - cache_level: swift_packages
    opts:
      title: Enable caching of Swift Package Manager packages
      description: |-
        Available options:
        - `none` : Disable caching
        - `swift_packages` : Cache Swift PM packages added to the Xcode project
      value_options:
      - "none"
      - "swift_packages"
      is_required: true
  - xcodebuild_options: ""
    opts:
      category: Debug
      title: Additional options for xcodebuild call
      description: |-
        Options added to the end of the xcodebuild call.
        You can use multiple options, separated by a space
        character. Example: `-xcconfig PATH -verbose`
  - output_dir: $BITRISE_DEPLOY_DIR
    opts:
      category: Debug
      title: Output directory path
      summary: ""
      description: |-
        This directory will contain the generated .app artifacts.
      is_required: true
  - output_tool: xcpretty
    opts:
      category: Debug
      title: Output tool
      description: |-
        If output_tool is set to xcpretty, the xcodebuild output will be prettified by xcpretty.
        If output_tool is set to xcodebuild, the raw xcodebuild output will be printed.
      value_options:
      - xcpretty
      - xcodebuild
      is_required: true
      is_expand: false
  - verbose_log: "no"
    opts:
      category: Debug
      title: Enable verbose logging?
      description: Enable verbose logging?
      is_required: true
      value_options:
      - "yes"
      - "no"

outputs:
  - BITRISE_TEST_DIR_PATH:
    opts:
      title: "Path to the built test directory (example: PROJECT_DERIVED_DATA/Build/Products/Debug-iphoneos)"
  - BITRISE_XCTESTRUN_FILE_PATH:
    opts:
      title: "Path to the built xctestrun file (example: PROJECT_DERIVED_DATA/Build/Products/ios-simple-objc_iphoneos12.0-arm64e.xctestrun)"
  - BITRISE_TEST_BUNDLE_ZIP_PATH:
    opts:
      title: "The built test directory and the built xctestrun file compressed as a single zip"
  - BITRISE_XCODE_BUILD_RAW_RESULT_TEXT_PATH:
    opts:
      title: The full, raw build output file path
      description: |-
        This is the path of the raw build results log file.
        If `output_tool=xcpretty` and the build fails this log will contain the build output.
